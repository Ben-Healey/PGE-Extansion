# Top level -*- Makefile -*- for pge
#   Copyright (C) 2015
#   Free Software Foundation, Inc.

# This file is part of pge

# pge is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.

# Xen-Lab is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with GNU CC; see the file COPYING.  If not, write to
# the Free Software Foundation, 51 Franklin Street, Fifth Floor,
# Boston, MA 02110-1301, USA.

#
#  Makefile - builds the predictive game engine
#

SHELL=/bin/bash


prefix= @prefix@
datarootdir= @datarootdir@
srcdir= @srcdir@
mandir= @mandir@
exec_prefix=@exec_prefix@
bindir= @bindir@
INSTALL_PROGRAM = install

DISTFILES = Makefile.in configure.ac configure \
            README version.c COPYING examples src \
            INSTALL


GM2=/opt/bin/gm2
G++=/opt/bin/g++
CC=/opt/bin/gcc

TARGET_SUBDIR=/opt/gm2/lib64

help:  force
	@echo "knows about:  all, clean"


SOURCES = \
          macroObjects.mod Points.mod Fractions.mod PolyMatrix3D.mod Transform3D.mod \
          delay.mod GC.mod popWorld.mod twoDsim.mod NetworkOrder.mod \
          roots.mod coord.mod polar.mod history.mod stairs.mod rpc.mod \
          snooker.mod wall.mod npn.mod wallv.mod slope.mod para.mod testpy.mod \
          deviceIf.mod ramps.mod ramps2.mod boxes.mod wallh.mod bounce.mod line.mod bounce2.mod \
          bounce3.mod bounce4.mod bounce5.mod bagatelle.mod elc.mod rboxes.mod circle.mod


PGELIBSOURCES = macroObjects.mod Points.mod Fractions.mod PolyMatrix3D.mod \
                Transform3D.mod delay.mod GC.mod popWorld.mod \
                twoDsim.mod roots.mod coord.mod polar.mod history.mod \
                deviceIf.mod rpc.mod deviceBuffer.mod pgeif.mod NetworkOrder.mod

PYTHON_VERSION=$(shell python --version 2>&1 | cut -f2 -d' ')
PYTHON_VERSION=2.7

GM2_LIB_DIR=/opt/gm2/lib/gcc/x86_64-linux-gnu/4.7.4/m2

SRC_PATH_PIM=$(srcdir)/src:$(GM2_LIB_DIR)/libgm2/pim:$(GM2_LIB_DIR)/iso

OBJECTS = $(SOURCES:%.mod=%.o)
PROFILE = 
CHECK = -fsoft-check-all

GM2FLAGS = $(PROFILE) $(CHECK) -g -fiso -fextended-opaque -I$(srcdir)/src -g
GM2LIBDIR = /opt/gm2

EXAMPLES = elc

XGM2=gm2
XGCC=gcc

# LIBTOOL=$(srcdir)/libtool

LIBTOOL=/usr/share/libtool

all: ball.raw
	make playback

ball.raw: libpgeif.la
	PYTHONPATH=.:$(srcdir)/src python $(srcdir)/examples/ball.py

triangle.raw: libpgeif.la
	PYTHONPATH=.:$(srcdir)/src python $(srcdir)/examples/triangle.py

%.asc:  %.max
	maxima -b $< > $@

%.m:  $(srcdir)/src/%.mxm
	python $(srcdir)/src/max2code.py -o $@ $<

$(srcdir)/src/twoDsim.mod: circles.m rotating-line.m rotating-circles.m

twoDsim.o: $(srcdir)/src/twoDsim.mod
	gm2 -I. -fcpp $(GM2FLAGS) -c $< -o $@

%.o:  $(srcdir)/src/%.mod
	gm2 $(GM2FLAGS) -c $< -o $@

%.o:  $(srcdir)/src/%.c
	gcc -g -c $< -o $@

%.lo:  $(srcdir)/src/%.mod
	$(LIBTOOL) --tag=CC --mode=compile gm2 -fcpp -g -fiso -fextended-opaque -I. -I$(srcdir)/src -c $< -o $@

%.lo:  $(srcdir)/src/%.c
	$(LIBTOOL) --tag=CC --mode=compile gcc -g -I$(srcdir)/src -c $< -o $@

libpgeif.la:  $(PGELIBSOURCES:%.mod=%.lo) buffers.lo
	swig -outdir . -o pgeif_wrap.cxx -c++ -python $(srcdir)/src/pgeif.i
	$(LIBTOOL) --tag=CC --mode=compile g++ -g -c pgeif_wrap.cxx -I/usr/include/python$(PYTHON_VERSION) -o pgeif_wrap.lo
	gm2 -c -g -I$(SRC_PATH_PIM) -fmakelist $(srcdir)/src/pgeif.mod
	gm2 -c -g -I$(SRC_PATH_PIM) -fmakeinit -fshared $(srcdir)/src/pgeif.mod
	$(LIBTOOL) --tag=CC --mode=compile g++ -g -c _m2_pgeif.cpp -o _m2_pgeif.lo
	$(LIBTOOL) --tag=CC --mode=link gcc -g _m2_pgeif.lo $(PGELIBSOURCES:%.mod=%.lo) \
            pgeif_wrap.lo buffers.lo \
           -L$(GM2LIBDIR)/lib64 \
           -rpath `pwd` -lgm2 -liso -lgcc -lstdc++ -lpth -lc -lm -o libpgeif.la 
	cp .libs/libpgeif.so _pgeif.so

output.raw: libpgeif.la
	PYTHONPATH=.:$(srcdir)/src python $(srcdir)/src/examples/exampleBoxes.py

playback: force
	PYTHONPATH=.:$(srcdir)/src python $(srcdir)/src/pgeplayback.py

boxes.raw:  libpgeif.la
	PYTHONPATH=.:$(srcdir)/src python $(srcdir)/src/examples/boxes.py

foo: circles.m $(OBJECTS)
	gm2 $(GM2FLAGS) -fonlylink $(srcdir)/src/foo.mod

bounce: $(OBJECTS)
	gm2 -fcpp -I. $(GM2FLAGS) -fonlylink $(srcdir)/src/bounce.mod

bounce2: $(OBJECTS)
	gm2 -fcpp -I. $(GM2FLAGS) -fonlylink $(srcdir)/src/bounce2.mod

bounce3: $(OBJECTS)
	gm2 -fcpp -I. $(GM2FLAGS) -fonlylink $(srcdir)/src/bounce3.mod

bounce4: $(OBJECTS)
	gm2 -fcpp -I. $(GM2FLAGS) -fonlylink $(srcdir)/src/bounce4.mod

bounce5: $(OBJECTS)
	gm2 -fcpp -I. $(GM2FLAGS) -fonlylink $(srcdir)/src/bounce5.mod

bagatelle: $(OBJECTS)
	gm2 -fcpp -I. $(GM2FLAGS) -fonlylink $(srcdir)/src/bagatelle.mod

elc: $(OBJECTS)
	gm2 -fcpp -I. $(GM2FLAGS) -fonlylink $(srcdir)/src/elc.mod

elc2: $(OBJECTS)
	gm2 -fcpp -I. $(GM2FLAGS) -fonlylink $(srcdir)/src/elc2.mod

line: $(OBJECTS)
	gm2 -fcpp -I. $(GM2FLAGS) -fonlylink $(srcdir)/src/line.mod

wallh: $(OBJECTS)
	gm2 -fcpp -I. $(GM2FLAGS) -fonlylink $(srcdir)/src/wallh.mod

rboxes: $(OBJECTS)
	gm2 -fcpp -I. $(GM2FLAGS) -fonlylink $(srcdir)/src/rboxes.mod

circle: $(OBJECTS)
	gm2 -fcpp -I. $(GM2FLAGS) -fonlylink $(srcdir)/src/circle.mod

boxes: $(OBJECTS)
	gm2 -fcpp -I. $(GM2FLAGS) -fonlylink $(srcdir)/src/boxes.mod

ramps: $(OBJECTS)
	gm2 -fcpp -I. $(GM2FLAGS) -fonlylink $(srcdir)/src/ramps.mod

ramps2: $(OBJECTS)
	gm2 -fcpp -I. $(GM2FLAGS) -fonlylink $(srcdir)/src/ramps2.mod

slope: $(OBJECTS)
	$(RM) *.ms *.png
	gm2 -fcpp -I. $(GM2FLAGS) -fonlylink $(srcdir)/src/slope.mod

stairs: $(OBJECTS)
	$(RM) *.ms *.png
	gm2 -fcpp -I. $(GM2FLAGS) -fonlylink $(srcdir)/src/stairs.mod

py: $(OBJECTS)
	$(RM) *.ms *.png
	gm2 -pg -g -fiso -fextended-opaque -fonlylink testpy.mod

para: $(OBJECTS)
	$(RM) *.ms *.png
	gm2 -fcpp -I. $(GM2FLAGS) -fonlylink para.mod && ./a.out
	./produce-avi

wallv: $(OBJECTS)
	$(RM) *.ms *.png
	gm2 $(GM2FLAGS) -fonlylink wallv.mod
	# ./produce-avi && mplayer pge.avi

wall: $(OBJECTS)
	$(RM) *.ms *.png
	gm2 $(GM2FLAGS) -fonlylink wall.mod
	# ./produce-avi && mplayer pge.avi

snooker: $(OBJECTS)
	$(RM) *.ms *.png
	gm2 -fcpp -I. $(GM2FLAGS) -fonlylink $(srcdir)/src/snooker.mod

npn: $(OBJECTS)
	$(RM) *.ms *.png
	gm2 -fcpp -I. $(GM2FLAGS) -fonlylink $(srcdir)/src/npn.mod && ./a.out

test: $(OBJECTS)
	gm2 -fcpp -I. $(GM2FLAGS) -fonlylink $(srcdir)/src/test.mod && ./a.out

transforms: rotating-circles.asc rotating-line.asc

release: force
	pwd
	echo pge-`sed -e '/version_string/!d' \
          -e 's/[^0-9.]*\([0-9.]*\).*/\1/' -e q $(srcdir)/version.c` > .fname
	-rm -rf `cat .fname`
	mkdir `cat .fname`
	dst=`cat .fname`; for f in $(DISTFILES); do \
           cp -rp $(srcdir)/$$f $$dst/$$f ; \
        done
	tar --gzip -chf `cat .fname`.tar.gz `cat .fname`
	# uuencode `cat .fname`.tar.gz `cat .fname`.tar.gz > `cat .fname`.uue
	-rm -rf `cat .fname` .fname

clean: force
	$(RM) *.o *.m *.cpp *~ $(EXAMPLES) *.so *.lo *.la
	$(RM) -rf .libs *_m2.cpp

clear: force
	$(RM) *.png *.ms *.cpp

force:
